syntax = "proto3";
import "validate/validate.proto";
import "google/protobuf/timestamp.proto";
import "google/rpc/status.proto";

package ir.uid.base;
option java_multiple_files = true;
option java_package = "ir.uid.base";
option objc_class_prefix = "RPC";


message BasicUserPassCredential{
  string userName = 1;
  string password = 2;
}

message OauthToken {
  string token = 1;
}

message Credential{
  oneof info {
    BasicUserPassCredential userPass = 1;
    OauthToken oauthToken = 2;
  }
}


enum AppType{
  ANDROID = 0;
  WEB_ANDROID = 1;
  WEB_IOS = 2;
}

message Version {
  // Major component of application version.
  int32 major = 1 [(validate.rules).int32.gte = 0];

  // Minor component of application version.
  int32 minor = 2 [(validate.rules).int32.gte = 0];

  // Patch component of application version.
  int32 patch = 3 [(validate.rules).int32.gte = 0];

  // Build number component of application version.
  int32 build = 4 [(validate.rules).int32.gte = 0];
}

message App {
  /*
   * **REQUIRED** Signature hash of client's executable in SHA2/256 form.
   *
   * - Important: Server MUST check this value against whitelisted hashes and reject login request if it is not enlisted.
   */
  bytes hash = 2 [(validate.rules).bytes.len = 32];

  /*
   * For Android devices, use methods [described here](https://mobile-security.gitbook.io/mobile-security-testing-guide/android-testing-guide/0x05j-testing-resiliency-against-reverse-engineering#testing-anti-debugging-detection-mstg-resilience-2).
   * For iOS devices, use methods [described here](https://mobile-security.gitbook.io/mobile-security-testing-guide/ios-testing-guide/0x06j-testing-resiliency-against-reverse-engineering#testing-anti-debugging-detection-mstg-resilience-2).
   * For PWA devices, use method [described in this Stackoverflow answer](https://stackoverflow.com/a/48287643/5304286).
   */
  bool debugger_attached = 10;
}


message AppInfo {
  // **REQUIRED** Client's version.
  Version version = 1 [(validate.rules).message.required = true];

  /*
   * For Android devices, it contains package ID of application which installed the app.
   * For iOS devices, it contains the store name which it is published.
   * For PWA devices, It contains `Referer` http header, if there is any.
   *
   * - Note: Empty string means no installation source can be determined.
   */
  string installation_source = 2;

  // Bundle ID or Package name of app.
  string bundleId = 3 [(validate.rules).string.min_len = 1];

  AppType appType=4;

  bytes appSignature = 5;

  string stepToken = 6;
  bytes userSessionToken = 7;

}

message ClientInformation{

}


message Page {
  int32 page = 1;
  int32 pageSize = 2;
  /* this field is filled by server */
  int64 totalSize = 3;
}

message TimeContext{
  google.protobuf.Timestamp clientTime = 1;
  google.protobuf.Timestamp expectedArrivalTime = 2;
  google.protobuf.Timestamp abortTime = 3;
}

message RequestHeader{
  string requestId = 1;
  bytes RequestHmac = 2;
  TimeContext timeContext = 3;
}

message RequestContext {
  RequestHeader requestHeader = 1;
  oneof sourceInfo {
    AppInfo appInfo = 2;
    APIInfo apiInfo = 3;
    PanelInfo panelInfo = 4;
  }
}


message PanelInfo{
  string panelName = 1;
  string panelId = 2;
  string sessionToken = 3;
}

enum APIServiceType{
  API_SERVICE_TYPE_UNDEFINED = 0;
  API_SERVICE_TYPE_AUTHENTICATION_API = 1;
}

message APIInfo {
  string businessId = 1;
  string businessToken = 2;
  APIServiceType serviceType = 3;
  string userSessionToken = 4;
  string stepToken = 5;
}



message ResponseContext {
  /*
   * Contains response code, localized message and associated data.
   *
   * See [Errors guide](https://cloud.google.com/apis/design/errors) for detailed description and equivalent http codes.
   *
   * See [this markdown](https://github.com/grpc/grpc/blob/master/doc/statuscodes.md) for technical details.
   */
  google.rpc.Status status = 1;

  /*
   * A unique UUID generated by client and sent to server in request.
   *
   * - Important: Server may block flooding requests with similar request IDs.
   */
  string requestId = 2 [(validate.rules).bytes.len = 16];

  /*
   * A unique UUID generated by server for incoming request.
   */
  string correlationId = 3 [(validate.rules).bytes.len = 16];

  //app://uid/signature-tutorial
  string navigationURI = 4;

  string nextStepToken = 5;

  string userSessionId = 6;

  // Custom key/value data that server may send to client.
  map<string, string> custom = 31;
}

message BareResponse{
  ResponseContext response_context = 1;
}

message ExceptionInfo{
  string exceptionMassage = 1;
  string exceptionType = 2;
}